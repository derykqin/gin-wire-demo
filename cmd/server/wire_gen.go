// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gin-wire-demo/internal/config"
	"gin-wire-demo/internal/controller"
	"gin-wire-demo/internal/middleware"
	"gin-wire-demo/internal/repository"
	"gin-wire-demo/internal/router"
	"gin-wire-demo/internal/service"
	"gin-wire-demo/pkg/db"
	"gin-wire-demo/pkg/logger"
	"gin-wire-demo/pkg/redis"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp 初始化应用
func InitializeApp(configPath string) (*router.Router, func(), error) {
	configConfig, err := config.LoadConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup, err := db.NewMySQL(configConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepositoryImpl := repository.NewUserRepository(gormDB)
	userServiceImpl := service.NewUserService(userRepositoryImpl)
	zapLogger, err := logger.NewZapLogger(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userController := controller.NewUserController(userServiceImpl, zapLogger)
	client, cleanup2, err := redis.NewRedisClient(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authMiddleware := middleware.NewAuthMiddleware(client)
	jwt, err := middleware.NewJWT(userServiceImpl, zapLogger, configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	authController := controller.NewAuthController(jwt, zapLogger)
	routerRouter := router.NewRouter(userController, authMiddleware, authController, jwt, configConfig, zapLogger)
	return routerRouter, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var dbSet = wire.NewSet(db.NewMySQL)

var redisSet = wire.NewSet(redis.NewRedisClient)

var configSet = wire.NewSet(config.LoadConfig)

var repositorySet = wire.NewSet(repository.NewUserRepository, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)))

var serviceSet = wire.NewSet(service.NewUserService, wire.Bind(new(service.UserService), new(*service.UserServiceImpl)))

var controllerSet = wire.NewSet(controller.NewUserController, controller.NewAuthController)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)

var routerSet = wire.NewSet(router.NewRouter)

var loggerSet = wire.NewSet(logger.NewZapLogger, wire.Bind(new(logger.Logger), new(*logger.ZapLogger)))

var jwtSet = wire.NewSet(middleware.NewJWT)
